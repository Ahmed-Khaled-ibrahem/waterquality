#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#define relayPin 32
// BLE variables
BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;

// Define UUIDs for BLE service and characteristic
#define SERVICE_UUID "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

void runRelay() {
  digitalWrite(relayPin, HIGH);
  delay(500);
  digitalWrite(relayPin, LOW);
}

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("Device connected");
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("Device disconnected");
    pServer->startAdvertising();  // Restart advertising
  }
};

class MyCharacteristicCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) {
    uint8_t* value = pCharacteristic->getData();   
    size_t length = pCharacteristic->getLength(); 

    Serial.print("Received value (length): ");
    Serial.println(length);
    Serial.print("Received value (raw): ");
    for (size_t i = 0; i < length; i++) {
      Serial.print(value[i], HEX);
      Serial.print(" ");
    }
    Serial.println();

    bool isOpenCommand = (length == 1 && value[0] == 'O');

    if (isOpenCommand) {
      Serial.println("Command received! sending to garage...");
      runRelay();
    } else {
      Serial.println("Invalid command or state");
    }
  }
};

void setup() {
  Serial.begin(115200);

  pinMode(relayPin, OUTPUT);
  delay(1000);
  digitalWrite(relayPin, LOW);

  // Initialize BLE
  BLEDevice::init("GarageDoor");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService* pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE);
  pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());

  // Set initial value
  pCharacteristic->setValue("Ready");

  pService->start();
  BLEAdvertising* pAdvertising = pServer->getAdvertising();
  pAdvertising->start();
  Serial.println("BLE Server started, waiting for connections...");
}

void loop() {
  delay(100);
}
