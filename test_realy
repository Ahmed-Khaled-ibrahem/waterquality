#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <Wire.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <EEPROM.h>

#define EEPROM_SIZE 512  // Define EEPROM size (in bytes)
#define Buzzer 5
#define LED 5

#define WIFI_SSID ""
#define WIFI_PASSWORD ""

#define API_KEY "AIzaSyBnXLeB4TL1STbF2bST-Sey_xfSCTKP7EM"
#define DATABASE_URL "https://esp-first-base-default-rtdb.firebaseio.com/"

#define RFID Serial2  // 17-TX - 16-RX

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

bool signupOK = false;

String message = "";
String Data = "";
unsigned long currentMillis;
const unsigned long period = 5000;

unsigned long currentUploadMillis;
unsigned long buzzerMillis;
const unsigned long Uploadperiod = 10000;

struct KeyValue {
  String key;
  String val;
  unsigned long lastScan;
  String state;
  bool isChanged;
};

struct flag {
  bool found;
  int val;
};

KeyValue cardsData[] = {
  { "Card 1", "5148484850485051495048484848484848484848484848485356554848504948", millis(), "out", false },
  { "Card 2", "5148484850485051495048484848484848484848484848485356554949505149", millis(), "out", false },
  { "Card 3", "5148484850485051495048484848484848484848484848485356555050505350", millis(), "out", false },
  { "Card 4", "5148484850485051495048484848484848484848484848485356535149544949", millis(), "out", false },
  { "Card 5", "5148484850485051495048484848484848484848484848485356545756494856", millis(), "out", false },
  { "Card 6", "5148484869504848484850485253484948505148495452486767685166686970", millis(), "out", false },
  { "Card 7", "5148484869504848484850485253484948494956495452485353695565685150", millis(), "out", false },
  { "Card 8", "5148484869504848484850485253484948494950495452485268545267486568", millis(), "out", false },
  { "Card 9", "5148484869504848484850485253484948495056495452485369575251516850", millis(), "out", false },
  { "Card 10", "5148484869504848484850485253484948495152495452485455525166565152", millis(), "out", false },
  { "Card 11", "5148484869505648545757534848484853484952685451495656665070665365", millis(), "out", false },
};

int mapSize = sizeof(cardsData) / sizeof(cardsData[0]);
int capacity = 50;
int all_in = 0;

void firebaseSetup() {

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  config.token_status_callback = tokenStatusCallback;

  String email = "ESP" + String(ESP.getEfuseMac()) + "@gmail.com";
  String password = String(ESP.getEfuseMac());

  auth.user.email = email.c_str();
  auth.user.password = password.c_str();

  Serial.println("trying to login as ");
  Serial.print("Email : ");
  Serial.println(email);
  Serial.print("Password : ");
  Serial.println(password);

  Firebase.begin(&config, &auth);

  if (auth.token.uid.length() > 0) {
    Serial.println("Login Successful!");
    Serial.println("User UID: " + String(auth.token.uid.c_str()));
    signupOK = true;
  } else {
    Serial.println("Login Failed. Trying to Sign Up...");
  }

  Firebase.reconnectWiFi(true);
}

void setup() {

  pinMode(Buzzer, OUTPUT);
  pinMode(LED, OUTPUT);
  Serial.begin(9600);
  digitalWrite(Buzzer, LOW);
  digitalWrite(LED, LOW);
  EEPROM.begin(EEPROM_SIZE);  // Initialize EEPROM

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  delay(3000);

  firebaseSetup();

  RFID.begin(38400, SERIAL_8N1, 16, 17);  // UART2 setup (baud, mode, RX, TX)
  delay(200);

  intiDatasetFromEprom();

  message = String("\nN1,14\r");  // set power
  RFID.print(message);
  delay(200);
  readRFID();

  message = String("\nN0,00\r");  // read power
  RFID.print(message);
  delay(200);
  readRFID();

  message = String("\nU\r");  // read multi
  RFID.print(message);
  delay(200);
  readRFID();

  // upload_cards_dataset();
  readIntFromFirebase("/rfid/" + String(ESP.getEfuseMac()) + "/capacity");
  Serial.println(String(ESP.getEfuseMac()));
}


void loop() {

  digitalWrite(Buzzer, LOW);
  message = String("\nU\r");  // read EPC
  RFID.print(message);
  delay(50);
  readRFID();
  handling_buzzer();
  check_capacity();

  if (millis() - currentUploadMillis >= Uploadperiod) {
    check_if_needs_upload();
    currentUploadMillis = millis();
  }
}

void readIntFromFirebase(String path) {
  if (Firebase.ready()) {
    // Read integer from Firebase at path "/test/int"
    if (Firebase.RTDB.getInt(&fbdo, path)) {
      Serial.println(fbdo.dataType());
      // Serial.println(fbdo.dataType());
      if (fbdo.dataType() == "int") {
        capacity = fbdo.intData();
        return;
      } else {
        Serial.println("Data type is not integer");
      }
    } else {
      Serial.print("Failed to read data: ");
      Serial.println(fbdo.errorReason());
    }
  } else {
    Serial.println("Firebase not ready");
  }
}

void check_capacity() {
  if (all_in >= capacity) {
    digitalWrite(LED, HIGH);
  }
  else {
    digitalWrite(LED, LOW);
  }
}

void intiDatasetFromEprom() {

  for (int i = 0; i < mapSize; i++) {
    int res = readFromEEPROM(i);
    if (res == 1) {
      cardsData[i].state = "in";
    } else {
      cardsData[i].state = "out";
    }
  }
}

void turn_buzzer() {
  buzzerMillis = millis();
}

void handling_buzzer() {

  if (millis() - buzzerMillis > 1000) {
    digitalWrite(Buzzer, LOW);
  } else {
    digitalWrite(Buzzer, HIGH);
  }
}

void writeToEEPROM(int address, int value) {
  EEPROM.write(address, value);  // Store a single byte
  EEPROM.commit();               // Save changes to flash memory
}

int readFromEEPROM(int address) {
  int value = EEPROM.read(address);
  return value;
}

void check_if_needs_upload() {
  int temp_counter = 0;

  for (int i = 0; i < mapSize; i++) {

    if (cardsData[i].state == "in") {
      temp_counter++;
    }

    if (cardsData[i].isChanged) {
      cardsData[i].isChanged = false;
      upload("rfid/" + String(ESP.getEfuseMac()) + "/cards/" + cardsData[i].val, cardsData[i].state);
    }
  }

  all_in = temp_counter;
}

void upload(String _path, String _value) {
  if (Firebase.ready() && signupOK) {
    if (Firebase.RTDB.setString(&fbdo, _path, _value)) {
      Serial.println("Uploaded");
    } else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }
  }
}

void readRFID() {
  while (RFID.available()) {
    byte incomingByte = RFID.read();
    if (incomingByte == 13 || incomingByte == 10 || incomingByte == 85 || incomingByte == 88) {  // 82
      continue;
    }
    Data.concat(incomingByte);
    if (Data.length() >= 64) {
      output();
    }
  }
  if (Data.length() > 1) {
    output();
  }
}

void output() {
  // Serial.println(Data);
  CardSearch(Data);
  turn_buzzer();
  Data = "";
}

void CardSearch(String targetValue) {

  flag foundKey = findKeyByValue(targetValue);

  if (foundKey.found) {
    if (millis() - cardsData[foundKey.val].lastScan > period) {
      Serial.print("Detected : ");
      Serial.println(cardsData[foundKey.val].key);
      cardsData[foundKey.val].lastScan = millis();

      if (cardsData[foundKey.val].state == "out") {
        cardsData[foundKey.val].state = "in";
        writeToEEPROM(foundKey.val, 1);
      } else {
        cardsData[foundKey.val].state = "out";
        writeToEEPROM(foundKey.val, 0);
      }

      cardsData[foundKey.val].isChanged = true;
    }
  } else {
    //    Serial.println("Value not found!");
  }
}

flag findKeyByValue(String _value) {
  for (int i = 0; i < mapSize; i++) {
    if (cardsData[i].val == _value) {
      digitalWrite(Buzzer, HIGH);
      return { true, i };
    }
  }
  return { false, 0 };
}
