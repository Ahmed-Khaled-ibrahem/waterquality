#include <DHT.h>
#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define DHTPIN 2
#define DHTTYPE DHT11
#define BUTTON_PIN 5
#define SERVO_PIN 6

DHT dht(DHTPIN, DHTTYPE);
Servo windowServo;
LiquidCrystal_I2C lcd(0x27, 16, 2);

bool windowOpen = false;
bool manualOverride = false;
bool lastButtonState = LOW;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;

void setup() {
  Serial.begin(9600);
  dht.begin();
  windowServo.attach(SERVO_PIN);
  pinMode(BUTTON_PIN, INPUT);
  
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Smart Window");
  delay(2000);
  lcd.clear();
}

void loop() {
  float temp = dht.readTemperature();
  bool buttonState = digitalRead(BUTTON_PIN);

  // Debounce button
  if (buttonState != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    // On rising edge of button press
    if (buttonState == HIGH && lastButtonState == LOW) {
      manualOverride = !manualOverride;
      toggleWindow();  // Toggle manually
    }
  }
  lastButtonState = buttonState;

  if (!manualOverride) {
    // Automatic control based on temperature
    if (temp >= 30 && !windowOpen) {
      openWindow();
    } else if (temp <= 28 && windowOpen) {
      closeWindow();
    }
  }

  // Display on LCD
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  if (isnan(temp)) {
    lcd.print("Error ");
  } else {
    lcd.print(temp);
    lcd.print((char)223); // degree symbol
    lcd.print("C ");
  }

  lcd.setCursor(0, 1);
  lcd.print("Window: ");
  lcd.print(windowOpen ? "Open  " : "Closed");

  delay(500); // Reduce flickering and DHT reading interval
}

void openWindow() {
  windowServo.write(150); // Adjust angle if needed
  windowOpen = true;
}

void closeWindow() {
  windowServo.write(0);
  windowOpen = false;
}

void toggleWindow() {
  if (windowOpen) {
    closeWindow();
  } else {
    openWindow();
  }
}
