#include <WiFi.h>
#include <WiFiUdp.h>
#include <DHT.h>

// Wi-Fi credentials (laptop hotspot)
const char* ssid = "DarkMatter";    // Replace with laptop hotspot SSID
const char* password = "12345678";  // Replace with hotspot password

// UDP settings
const char* udpAddress = "255.255.255.255";  // Broadcast to network
const int udpPort = 12345;

// Sensor pins
#define DHT_PIN 4       // GPIO 4 for DHT11/DHT22
#define UV_PIN 34       // GPIO 34 for GUVA-S12SD (ADC)
#define DHT_TYPE DHT11  // Use DHT11 for DHT11 sensor

// Initialize DHT sensor
DHT dht(DHT_PIN, DHT_TYPE);

// Initialize UDP
WiFiUDP udp;

void setup() {
  // Start serial for debugging
  Serial.begin(115200);

  // Initialize DHT sensor
  dht.begin();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

float readUVIndex() {
  int adcValue = analogRead(UV_PIN);          // 0-4095
  float voltage = (adcValue / 4095.0) * 3.3;  // Convert to voltage (0-3.3V)
  // GUVA-S12SD: ~0.1V per UV index (approximate)
  float uvIndex = voltage / 0.1;
  return uvIndex;
}

void loop() {
  // Read DHT sensor
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  // Check if readings are valid
  if (isnan(temp) || isnan(hum)) {
    Serial.println("Failed to read from DHT sensor!");
    temp = 0;
    hum = 0;
  }

  // Read UV sensor
  float uv = readUVIndex();
  // Create data string

  char data[50];
  snprintf(data, sizeof(data), "%.1f,%.1f,%.1f", temp, hum, uv);

  // Send data via UDP with explicit cast
  udp.beginPacket(udpAddress, udpPort);
  udp.write((uint8_t*)data, strlen(data));  // Cast to uint8_t* and specify length
  udp.endPacket();

  // Print to serial for debugging
  Serial.printf("Sent: T=%.1fC, H=%.1f%%, UV=%.1f\n", temp, hum, uv);

  delay(5000);  // Send every 5 seconds
}
