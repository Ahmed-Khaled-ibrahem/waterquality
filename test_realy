#include <WiFi.h>
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <Adafruit_SSD1306.h>

// WiFi credentials
const char SSID[] = "";  // Replace with your WiFi SSID
const char PASS[] = "";  // Replace with your WiFi password

// Arduino IoT Cloud Device credentials
const char DEVICE_ID[] = "";   // Replace with your device ID
const char SECRET_KEY[] = "";  // Replace with your secret key

// Variables to be synced with the cloud
int waterLevelPercentage;
int lastWaterLevel = 0;
String waterDistance;
bool buzzerState;
bool pumbState;

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 32  // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET -1  // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Cloud connection handler
WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

// GPIO Pins
#define TRIGPIN 27
#define ECHOPIN 26
#define wifiLed 2
#define ButtonPin1 12
#define BuzzerPin 13
#define GreenLed 14
#define RELAY_PIN 32
#define RELAY_BUTTON 33

// Tank distance thresholds (in cm)
const int emptyTankDistance = 11;
const int fullTankDistance = 2;

// Trigger percentage for alarm
const int triggerPer = 15;

float duration;
float distance;

// Variables for button debounce
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;  // 50ms debounce delay
bool lastButtonState = HIGH;       // Button unpressed state
bool toggleBuzzer = HIGH;          // Keeps track of buzzer toggle state

void initProperties() {
  // Arduino IoT Cloud setup
  ArduinoCloud.setBoardId(DEVICE_ID);
  ArduinoCloud.setSecretDeviceKey(SECRET_KEY);
  ArduinoCloud.addProperty(waterLevelPercentage, READ, 2 * SECONDS, onWaterLevelPercentageChange);
  ArduinoCloud.addProperty(waterDistance, READ, 2 * SECONDS, NULL);
  ArduinoCloud.addProperty(buzzerState, READWRITE, ON_CHANGE, onBuzzerStateChange);
  ArduinoCloud.addProperty(pumbState, READ, ON_CHANGE, onpumb_change);
}
void doThisOnConnect() {
  /* add your custom code here */
  Serial.println("Board successfully connected to Arduino IoT Cloud");
  digitalWrite(wifiLed, HIGH);  //Turn off WiFi LED
}
void doThisOnSync() {
  /* add your custom code here */
  Serial.println("Thing Properties synchronised");
}
void doThisOnDisconnect() {
  /* add your custom code here */
  Serial.println("Board disconnected from Arduino IoT Cloud");
  digitalWrite(wifiLed, LOW);  //Turn off WiFi LED
}
void onWaterLevelPercentageChange() {
  Serial.print("Water Level Changed to: ");
  Serial.println(waterLevelPercentage);
}
void onBuzzerStateChange() {
  if (!buzzerState) {
    digitalWrite(BuzzerPin, LOW);
    toggleBuzzer = LOW;
  }
}
void onpumb_change() {
}

void setup() {
  // Initialize Serial
  Serial.begin(115200);

  // Pin configurations
  pinMode(TRIGPIN, OUTPUT);
  pinMode(ECHOPIN, INPUT);
  pinMode(wifiLed, OUTPUT);
  pinMode(GreenLed, OUTPUT);
  pinMode(BuzzerPin, OUTPUT);
  pinMode(ButtonPin1, INPUT_PULLUP);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(RELAY_BUTTON, INPUT);

  digitalWrite(wifiLed, LOW);
  digitalWrite(GreenLed, LOW);
  digitalWrite(BuzzerPin, LOW);
  digitalWrite(RELAY_PIN, LOW);
  pumbState = false;

  // OLED Display initialization
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  delay(1000);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.clearDisplay();

  initProperties();

  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, doThisOnConnect);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::SYNC, doThisOnSync);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::DISCONNECT, doThisOnDisconnect);
}

void loop() {
  ArduinoCloud.update();
  measureWaterLevel();
  handleBuzzerButton();
  handleRelayButton();
}

void togleRelay() {
  pumbState = !pumbState;
  digitalWrite(RELAY_PIN, pumbState);
}

void measureWaterLevel() {
  // Trigger the ultrasonic sensor
  digitalWrite(TRIGPIN, LOW);
  delayMicroseconds(5);
  digitalWrite(TRIGPIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGPIN, LOW);

  // Measure the duration of the echo pulse
  duration = pulseIn(ECHOPIN, HIGH);
  distance = ((duration / 2) * 0.343) / 10;

  if (distance > fullTankDistance && distance < emptyTankDistance) {
    // Calculate water level percentage
    waterLevelPercentage = map((int)distance, emptyTankDistance, fullTankDistance, 0, 100);
    waterDistance = String(distance) + " cm";

    if (waterLevelPercentage < lastWaterLevel && !pumbState) {
      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0, 0);
      display.println("Alert");
      display.setTextSize(1);
      display.print("Water Leak!!!");
      display.display();
    } else {
      // Update OLED display
      display.clearDisplay();
      display.setTextSize(4);
      display.setCursor(8, 2);
      display.print(waterLevelPercentage);
      display.print(" %");
      display.display();
    }
    lastWaterLevel = waterLevelPercentage;

    // Manage LED and buzzer
    if (waterLevelPercentage < triggerPer) {

      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0, 0);
      display.println("Alert");
      display.setTextSize(1);
      display.print("water less than trigger value");
      display.display();


      digitalWrite(GreenLed, HIGH);
      if (toggleBuzzer == HIGH) {
        digitalWrite(BuzzerPin, HIGH);
        buzzerState = true;
      }
    } else {
      digitalWrite(GreenLed, LOW);
      if (toggleBuzzer == HIGH) {
        digitalWrite(BuzzerPin, HIGH);
      }
    }

    // if (waterLevelPercentage > 80) {
    //   pumbState = false;
    //   digitalWrite(RELAY_PIN, LOW);
    // }

    if (distance > fullTankDistance && waterLevelPercentage > triggerPer) {
      toggleBuzzer = HIGH;
      digitalWrite(BuzzerPin, LOW);
      buzzerState = false;
    }
  } else {
    // Update OLED display
    display.clearDisplay();
    display.setTextSize(4);
    display.setCursor(8, 2);
    display.print("--");
    display.print(" %");
    display.display();
  }
}

void handleRelayButton() {
  if (digitalRead(RELAY_BUTTON) == HIGH) {
    while (digitalRead(RELAY_BUTTON) == HIGH) { delay(10); }
    togleRelay();
  }
}

void handleBuzzerButton() {
  bool currentButtonState = digitalRead(ButtonPin1);

  if (currentButtonState != lastButtonState) {
    lastDebounceTime = millis();  // Reset debounce timer
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (currentButtonState == LOW && toggleBuzzer == HIGH) {  // Button pressed
      digitalWrite(BuzzerPin, LOW);
      toggleBuzzer = LOW;
      buzzerState = false;
      ArduinoCloud.update();
    }
  }

  lastButtonState = currentButtonState;  // Update the button state
}
