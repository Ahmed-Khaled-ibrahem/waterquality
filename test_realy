#include <Wire.h>
#include <DHT.h>
#include <SoftwareSerial.h>
#include <Servo.h>
#include <TinyGPS++.h>

#define DHTPIN 2
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

#define FIRE_SENSOR_1 A0
#define FIRE_SENSOR_2 A1
#define FIRE_SENSOR_3 A2
#define FIRE_SENSOR_4 A3
#define FIRE_SENSOR_5 A4
#define TRIG_PIN 3
#define ECHO_PIN 4
#define RELAY_PIN 24
#define SERVO_PIN 6
#define MOTOR1_IN1 7
#define MOTOR1_IN2 8
#define MOTOR2_IN1 9
#define MOTOR2_IN2 10
#define ESP_CAM_TX 26
#define ESP_CAM_RX 27

SoftwareSerial espCam(ESP_CAM_TX, ESP_CAM_RX);
Servo myServo;
String location = "";
TinyGPSPlus gps;

float temperature = 0;
float humidity = 0;
String lastLink = "";
int fireDetected1 = 0;
int fireDetected2 = 0;
int fireDetected3 = 0;
int fireDetected4 = 0;
int fireDetected5 = 0;
float distance = 100;
long duration = 0;
int triggerValue = 0;
unsigned long last_log_data = 0;

void setup() {
  Serial.begin(9600);
  dht.begin();
  pinMode(FIRE_SENSOR_1, INPUT);
  pinMode(FIRE_SENSOR_2, INPUT);
  pinMode(FIRE_SENSOR_3, INPUT);
  pinMode(FIRE_SENSOR_4, INPUT);
  pinMode(FIRE_SENSOR_5, INPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(MOTOR1_IN1, OUTPUT);
  pinMode(MOTOR1_IN2, OUTPUT);
  pinMode(MOTOR2_IN1, OUTPUT);
  pinMode(MOTOR2_IN2, OUTPUT);

  myServo.attach(SERVO_PIN);

  Serial1.begin(9600);
  espCam.begin(9600);

  digitalWrite(RELAY_PIN, LOW);
  Serial.println("Code is Starting");
}

void loop() {

  getGPS();

  if (millis() - last_log_data > 1500) {
    last_log_data = millis();
    temperature = dht.readTemperature();
    humidity = dht.readHumidity();

    fireDetected1 = analogRead(FIRE_SENSOR_1);
    fireDetected2 = analogRead(FIRE_SENSOR_2);
    fireDetected3 = analogRead(FIRE_SENSOR_3);
    fireDetected4 = analogRead(FIRE_SENSOR_4);
    fireDetected5 = analogRead(FIRE_SENSOR_5);

    distance = getUltrasonicDistance();
    log_dht();
    log_fire_sensor();
    log_distance();
    Serial.println(location);
  }

  if (distance < 20) {
    avoidObstacle();
  } else {
    moveForward();
  }

  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');  // Read input until newline
    command.trim();                                 // Remove any whitespace or newlines

    if (command == "fire") {
      fireDetected1 = 600;
    }
  }

  triggerValue = 300;

  if (fireDetected1 > triggerValue || fireDetected2 > triggerValue || fireDetected3 > triggerValue || fireDetected4 > triggerValue || fireDetected5 > triggerValue) {
    Serial.println("Fire detected!");
    stopMotors();

    int fireValues[5] = { fireDetected1, fireDetected2, fireDetected3, fireDetected4, fireDetected5 };
    int maxIndex = 0;
    int maxValue = fireValues[0];

    for (int i = 1; i < 5; i++) {
      if (fireValues[i] > maxValue) {
        maxValue = fireValues[i];
        maxIndex = i;
      }
    }

    int servo_angles[5] = { 60, 80, 90, 100, 120 };
    myServo.write(servo_angles[maxIndex]);

    String text = getMessage();
    Serial.println(text);
    takePhoto(text);

    activateWaterPump();
    delay(2000);
    myServo.write(90);
  }
}

void log_dht() {
  Serial.print("temperature : ");
  Serial.println(temperature);
  Serial.print("humidity : ");
  Serial.println(humidity);
}
void log_fire_sensor() {
  Serial.print("fire Sensor : ");
  Serial.print(fireDetected1);
  Serial.print(", ");
  Serial.print(fireDetected2);
  Serial.print(", ");
  Serial.print(fireDetected3);
  Serial.print(", ");
  Serial.print(fireDetected4);
  Serial.print(", ");
  Serial.print(fireDetected5);
  Serial.println(" ");
}
void log_distance() {
  Serial.print("distance : ");
  Serial.println(distance);
}
String getMessage() {
  return "Location : "
         + String(getGPS()) + "\n"
                              "Temperature : "
         + String(temperature) + "\n"
                                 "Humidity : "
         + String(humidity) + "\n";
}
String getGPS() {

  while (Serial1.available() > 0) {
    gps.encode(Serial1.read());
    if (gps.location.isUpdated()) {
      location = "Lat : " + String(gps.location.lat()) + "  " + "Lng : " + String(gps.location.lng());
    }
  }

  return location;
}
void takePhoto(String txt) {

  Serial.println("Capturing Photo...");
  espCam.flush();
  espCam.readString();
  espCam.println("CAPTURE" + txt);
  delay(1500);

  // if (espCam.available()) {
  //   String response = espCam.readString();
  //   int index = response.indexOf("img_id_to_upload");
  //   String newz = response.substring(index + 16);
  //   Serial.println(newz);
  //   str_id = newz;
  // }

  // return str_id;
}
void activateWaterPump() {
  Serial.println("pump is runninig");
  digitalWrite(RELAY_PIN, HIGH);
  delay(5000);
  digitalWrite(RELAY_PIN, LOW);
}
void moveForward() {
  digitalWrite(MOTOR1_IN1, HIGH);
  digitalWrite(MOTOR1_IN2, LOW);
  digitalWrite(MOTOR2_IN1, HIGH);
  digitalWrite(MOTOR2_IN2, LOW);
}
void stopMotors() {
  digitalWrite(MOTOR1_IN1, LOW);
  digitalWrite(MOTOR1_IN2, LOW);
  digitalWrite(MOTOR2_IN1, LOW);
  digitalWrite(MOTOR2_IN2, LOW);
}
float getUltrasonicDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(5);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  pinMode(ECHO_PIN, INPUT);
  duration = pulseIn(ECHO_PIN, HIGH);
  return duration * 0.034 / 2;
}
void avoidObstacle() {
  Serial.println("Obstacle detected! Avoiding...");
  stopMotors();
  myServo.write(0);
  delay(4000);
  float leftDistance = getUltrasonicDistance();
  myServo.write(180);
  delay(4000);
  float rightDistance = getUltrasonicDistance();
  myServo.write(90);

  if (leftDistance > rightDistance) {
    turnLeft();
  } else {
    turnRight();
  }
}
void turnLeft() {
  Serial.println("Turning Left");
  digitalWrite(MOTOR1_IN1, LOW);
  digitalWrite(MOTOR1_IN2, HIGH);
  digitalWrite(MOTOR2_IN1, HIGH);
  digitalWrite(MOTOR2_IN2, LOW);
  delay(3000);
  moveForward();
}
void turnRight() {
  Serial.println("Turning Right");
  digitalWrite(MOTOR1_IN1, HIGH);
  digitalWrite(MOTOR1_IN2, LOW);
  digitalWrite(MOTOR2_IN1, LOW);
  digitalWrite(MOTOR2_IN2, HIGH);
  delay(3000);
  moveForward();
}
